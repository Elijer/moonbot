{"version":3,"sources":["context/Config.js","utilities/Debugger.js","context/AuthContext.js","utilities/PrivateRoute.js","context/TimeContext.js","utilities/utilities.js","context/RequestContext.js","pages/Tracker/TimeDisplay.js","pages/Tracker/SleepInput.js","pages/Tracker/CryInput.js","pages/Tracker/EnergyInput.js","pages/Tracker/BCInput.js","pages/Tracker.js","images/pink_sky.jpeg","pages/LoginPage.js","images/snowy_moon.jpeg","pages/RegisterPage.js","charts/Rechart_1.js","pages/Log.js","pages/SettingsPage.js","pages/NotFound.js","components/Header.js","App.js","index.js"],"names":["Config","serverURL","window","location","hostname","dd","console","log","bind","AuthContext","createContext","AuthProvider","children","cookie","localStorage","getItem","useState","JSON","parse","authTokens","setAuthTokens","jwt_decode","user","setUser","settings","setSettings","loginAttempt","setLoginAttempt","loading","setLoading","history","useHistory","custom_jwt_decode","access","data","id","user_id","uppercaseUsername","username","toUpperCase","substring","loginEvent","userObj","setItem","stringify","push","loginUser","e","a","preventDefault","fetch","method","headers","body","target","value","password","response","json","status","logoutUser","useCallback","removeItem","registerUser","form","email","confirmation","updateToken","refresh","useEffect","interval","setInterval","clearInterval","getSettings","String","alert","contextData","clearLoginAttempt","Provider","PrivateRoute","rest","useContext","to","TimeContext","TimeProvider","time","date","dateString","timeOfDay","timezone","setTime","m","moment","tz","Intl","DateTimeFormat","resolvedOptions","timeZone","format","replace","getTimeOfDay","morningStart","morningEnd","middayEnd","isBefore","isAfter","formatTime","val","noColon","replaceAll","parseInt","length","hours","insert","up","str","c","s","index","slice","dayInMilliseconds","Date","day","getDate","month","getMonth","year","getFullYear","getTime","RequestContext","RequestProvider","updateEntry","someData","updateSettings","TimeDisplay","SleepInput","props","wake","sleep","wakeSaved","sleepSaved","sleepDomain","wakeDomain","state","setState","userInteraction","setUserInteraction","wakeIsValid","validateTime","sleepIsValid","handleAMPM","sleepScenario","newVal","AMPMproperty","handleTimeInput","newData","nativeEvent","valid","test","backSpace","inputType","newValue","oneLess","className","maxLength","placeholder","onChange","onClick","CryInput","cries","setCries","saved","setSaved","handleClick","amount","Math","sign","EnergyInput","selection","setSelection","handleSelection","n","BCInput","setDay","i","BC_day","map","Tracker","entryData","setEntryData","sleepSet","setSleepSet","energySet","setEnergySet","BCSet","setBCSet","getEntry","sleep_set","display_rest","display_cries","display_energy","display_bc","LoginPage","src","background","alt","onSubmit","type","name","autoComplete","RegisterPage","Rechart_1","setData","legend","dataName","stroke","fill","ResponsiveContainer","width","height","AreaChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Area","style","color","Log","getData","entries","forEach","element","energy","niceDate","dim","SettingsPage","displayKey","display_outside","Object","keys","key","handleSettingsChange","NotFound","Header","Fragment","App","component","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b602f5fb.chunk.js","sourcesContent":["let serverURL;\n\nif (window.location.hostname === \"localhost\") {\n    serverURL = \"http://127.0.0.1:7000/\"\n} else {\n    //serverURL = `${window.location.protocol}//${window.location.hostname}:7000/`\n    //serverURL: `http://moonbot.me:7000/`\n\n    serverURL = \"//http://104.131.76.82:7000/\"\n\n}\n\nconst Config = {\n    serverURL: serverURL\n}\n\nexport default Config","const isDebug = true // toggle this to turn on / off for global controll\n\nlet dd\n\n\n// This custom debugger was inspired by Arctelix\n// Where he posted it as a solution on this stackoverflow thread:\n// https://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number\nif (isDebug){\n    dd = console.log.bind(window.console)\n} else {\n    dd = function(){}\n}\n\nexport default dd","import { createContext, useState, useEffect, useCallback} from 'react'\nimport jwt_decode from 'jwt-decode'\nimport { useHistory } from 'react-router-dom'\nimport Config from './Config'\nimport dd from '../utilities/Debugger'\n\nconst AuthContext = createContext()\n\nexport default AuthContext\n\nexport const AuthProvider = ({children}) => {\n\n    // This AuthProvider component was heavily inspired by Dennis Ivy\n    // He shared his method for using JWT tokens to store persistent access and refresh tokens\n    // In a user's local storage for authentication, similar to what Django seems to do automatically\n    // He shared his code publicly in the youtube video: \"Authentication & Refreshing Tokens Implementation\" https://www.youtube.com/watch?v=xjMP0hspNLE\n    // And in the github repository here: https://github.com/divanov11/refresh-token-interval\n    // To make this component, I used his code as a base 11/04/2021\n\n    // We saved the access token to localStorage\n    let cookie = localStorage.getItem('authTokens')\n\n    let [ authTokens, setAuthTokens ] = useState(() => {\n        const authTokens = cookie ? JSON.parse(cookie) : null;\n        return authTokens\n    })\n\n    let [ user, setUser ] = useState(() => {\n        if (cookie){\n            const decoded_user = jwt_decode(cookie)\n            return decoded_user\n        } else {\n            // no user\n            return null\n        }\n    })\n\n    let [settings, setSettings] = useState({})\n\n    const [loginAttempt, setLoginAttempt] = useState(false)\n    const [loading, setLoading] = useState(true)\n\n    const history = useHistory()\n\n\n    // This function decodes and extrapolates data encoded in authTokens.access\n    // It creates the uppercaseUsername property, and renames user_id to id for clarity\n    let custom_jwt_decode = (access) => {\n        let data = jwt_decode(access)\n        data.id = data.user_id\n        data.uppercaseUsername = data.username[0].toUpperCase() + data.username.substring(1)\n        delete data.user_id\n        //dd(data)\n        return data\n    }\n\n    let loginEvent = (data)=> {\n        setAuthTokens(data)\n\n        // create the user object with all use information for access throughout application\n        const userObj = custom_jwt_decode(data.access) // decode username from access code\n        setUser(userObj)\n        localStorage.setItem('authTokens', JSON.stringify(data))\n        history.push('/') // send user to home page, which they can only access if logged in\n    }\n\n    let loginUser = async (e) => {\n        //this is where a loading thingy would go\n        e.preventDefault() //prevents page from refreshing\n        dd('Form Submitted', e) \n        \n        let response = await fetch(Config.serverURL + 'api/token/', {\n            method: 'POST',\n            headers:  {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                'username': e.target.username.value,\n                'password': e.target.password.value\n            })\n        })\n\n        // wait for response\n        let data = await response.json()\n\n        if (response.status === 200){\n            data.username = jwt_decode(data.access).username\n            loginEvent(data) // log user in\n            setLoginAttempt(false)\n            return \"success\"\n        } else {\n            setLoginAttempt(true)\n            dd(\"Something went wrong -- you probably supplied the wrong login credentials\")\n            return \"loginError\"\n        }\n    }\n\n    let logoutUser = useCallback(\n        () => {\n            history.push('/login')\n            setAuthTokens(null)\n            setUser(null)\n            localStorage.removeItem('authTokens')\n            setLoginAttempt(false)\n            setLoading(true)\n        },\n        [history]\n    )\n\n    let registerUser = async (e) => {\n        e.preventDefault()\n        let form = e.target;\n        dd('Form Submitted', form)\n        \n        let response = await fetch(Config.serverURL + 'api/register/', {\n            method: 'POST',\n            headers:  {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                'username': form.username.value,\n                \"email\": form.email?.value,\n                \"password\": form.password.value,\n                \"confirmation\": form.confirmation.value\n            })\n        })\n\n        let data = await response.json()\n        if (response.status === 200){\n            loginEvent(data)\n            setLoginAttempt(false)\n        } else {\n            setLoginAttempt(true)\n            dd(\"error\")\n        }\n\n    }\n    \n    let clearLoginAttempt = () => {\n        setLoginAttempt(false)\n    }\n\n    let updateToken = useCallback(\n        async () => {\n            dd(\"fetching api/token/refresh to update token\")\n            let response = await fetch(Config.serverURL + 'api/token/refresh/', {\n                method: 'POST',\n                headers:  {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    'refresh': authTokens?.refresh // the question mark apparently prevents this fetch call from getting used if it doesn't exist, preventing errors\n                })\n            })\n    \n            // wait for response\n            let data = await response.json()\n    \n            if (response.status === 200){\n                // save tokens to state AND local storage\n                setAuthTokens(data)\n                setUser(custom_jwt_decode(data.access)) // decode user out of the access code\n                localStorage.setItem('authTokens', JSON.stringify(data))\n            } else {\n                dd(\"Couldn't refresh token -- this could be an intentional or unintentional logout\")\n                logoutUser()\n            }\n    \n            if(loading){\n                setLoading(false)\n            }\n        },\n        [authTokens?.refresh, loading, logoutUser]\n    )\n\n    let serverURL = Config.serverURL\n\n    useEffect(()=> {\n\n        if(loading){\n            updateToken()\n        }\n\n        let fourMinutes = 1000 * 60 * 4\n\n        // Every four minutes, if the user is still logged in with valid authTokens in browser storage,\n        // update those tokens.\n        // Because the tokens have a limited lifespan, this prevents a situation where the user \n        // is logged in, tries to do something, and ends up getting logged out.\n        // a more sophisticated version would check if the user is ACTIVE, and only refresh the tokens if that is\n        // the case, one during whatever the interval is.\n        // However, the current lifespan of an access token is a day, so this scenario is still not super likely.\n        let interval = setInterval(() => {\n            if(authTokens){\n                updateToken()\n            }\n        }, fourMinutes)\n        return ()=> clearInterval(interval)\n\n        // we have to clear the interval after calling it so it only runs once\n        // otherwise we'll end up with an incerasing number of intervals running in parallell\n\n    }, [authTokens, loading, updateToken])\n\n    let getSettings = async() => {\n        //dd(time)\n\n        let response = await fetch(serverURL + 'getSettings/', {\n            method: 'POST',\n            headers:  {\n              'Content-Type': 'application/json',\n              'Authorization': 'Bearer ' + String(authTokens.access)\n            },\n/*             body: JSON.stringify({\n                'dateString': time.dateString,\n                //'dayInMilliseconds': dayInMilliseconds()\n            }) */\n        })\n\n        let data = await response.json()\n        if (response.status === 200){\n            setSettings(data)\n        } else if (response.status === 401){\n            alert(\"You are not authorized to read this user's settings\")\n            //setBody(props.data.body)\n        } else if (response.status === 404){\n            alert(\"The user you are trying to view could not be found.\")\n            //setBody(props.data.body)\n        }\n    }\n\n    // 'Export' functions/variables to the component which will wrap other components, thus sharing its context\n    let contextData = {\n        // Variables\n        user: user,\n        authTokens:authTokens,\n        serverURL: serverURL,\n        loginAttempt: loginAttempt,\n        settings: settings,\n        \n        // Functions:\n        setSettings: setSettings,\n        clearLoginAttempt: clearLoginAttempt,\n        loginUser: loginUser,\n        logoutUser: logoutUser,\n        registerUser: registerUser,\n        getSettings: getSettings\n    \n    }\n\n    // Pass contextData into the value of AuthContext.Provider so that it can be used\n    return (\n        <AuthContext.Provider value = {contextData}>\n            {loading ? null : children}\n        </AuthContext.Provider>\n    )\n}","import { Route, Redirect } from 'react-router-dom'\nimport { useContext } from 'react'\nimport AuthContext from '../context/AuthContext'\n\n// This component is a wrapper for route that is being extended\n// To make sure that the user is authenticated in order to view this route\n// And this can continue to be modified to show different things depending on the user\n\n//...rest is a spread operator that can take all the parameters, or props maybe? That the <Route> tag normally gets,\n// like route, path, component, etc.=\n\n\n// This PrivateRoute component courtesy of Dennis Ivy\n// He shared this custom extension of the Route component in the following video:\n// \"Authentication & Refreshing Tokens Implementation\" https://www.youtube.com/watch?v=xjMP0hspNLE\n// He shared the code in a public github repository here: https://github.com/divanov11/refresh-token-interval\nconst PrivateRoute = ({children, ...rest}) => {\n    let {user} = useContext(AuthContext)\n    return(\n        <Route {...rest} >\n\n            {!user ? <Redirect to = \"/login/\" /> : children}\n\n        </Route>\n    )\n}\n\nexport default PrivateRoute","import { createContext, useState, useEffect} from 'react'\nimport moment from 'moment';\nimport dd from '../utilities/Debugger';\n//import dd from '../utilities/Debugger';\n\nconst TimeContext = createContext()\n\nexport default TimeContext\n\nexport const TimeProvider = ({children}) => {\n\n    let [time, setTime] = useState({\n        time: \"\",\n        date: \"\",\n        dateString: \"\",\n        timeOfDay: \"\",\n        timezone: \"\"\n    })\n\n    let [loading, setLoading] = useState(false)\n\n    useEffect(()=> {\n        if (loading === false){\n            let m = moment()\n            const tz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n            dd(m.format('dddd, MMM Do'))\n\n            setTime({\n                time: m.format('h:mm a'),\n                date: m.format('dddd, MMM Do'),\n                dateString: m.format('L').replace(/\\//g, \"-\"),\n                timeOfDay: getTimeOfDay(m),\n                timezone: tz\n            });\n\n            setLoading(false)\n\n        }\n    }, [loading])\n\n    var getTimeOfDay = function(m){\n        var timeOfDay;\n        var morningStart = moment('2:00am', 'h:mma');\n        var morningEnd = moment('11:59am', 'h:mma');\n        var middayEnd = moment('6:00pm', 'h:mma');\n    \n        if (m.isBefore(middayEnd) && m.isAfter(morningEnd)){\n            timeOfDay = \"midday\"\n            //midday\n        } else if (m.isBefore(morningEnd) && m.isAfter(morningStart)){\n            timeOfDay = \"morning\";\n            //morning\n        } else if (m.isAfter(middayEnd)){\n           timeOfDay = \"evening\";\n            //evening\n        } else {\n            // after midnight\n            timeOfDay = \"evening\";\n        }\n        return timeOfDay\n    }\n\n    let contextData = {\n        time: time\n    }\n\n    return (\n        <TimeContext.Provider value = {contextData}>\n            {/* Load children even if time hasn't loaded yet to minimize re-renders */}\n            {loading ? null : children}\n        </TimeContext.Provider>\n    )\n\n}","// Helper function used by handleTimeInput\n// This function takes a string and returns time in either 0:00 or 00:00 format, OR partial strings of these formats.\nexport let formatTime = (val) => {\n    // prepare val into noColon string\n    let noColon = val.replaceAll(':', '')// get rid of all colons\n    if (parseInt(noColon[0]) === 0) noColon = noColon.substring(1, noColon.length) // if noColon starts with 0, drop it\n    noColon = noColon.substring(0, 4) // and ensure noColon doesn't exceed 4 digits\n    let hours = parseInt(noColon.substring(0, 2)); // get the first two digits as a number\n    let output = noColon // create variable function will return\n\n    if (parseInt(noColon[1]) > 5) noColon = noColon[0] // The second character can't be more than 5: If it is, cut it out and continue\n\n    if (noColon.length < 2) output = noColon // If there's only one digit, don't add any colons -- this prevents full deletion\n    else if (\n\n        hours > 15 // but 13, 14 and 15 can create valid 3 digit hours too (1:32, 1:59, etc.)\n        || noColon[2] > 5 // if third digit is more than 5, 1:26 , 4 digits aren't valid. ex. 12:61\n        || noColon.length < 4 // If digits are 3 or fewer, we'll want colon here \"0:00\" anyways\n\n    ) output = insert(noColon, \":\", 1).substring(0, 4) // Format to 3 digits: 0:00\n\n    else output = insert(noColon, \":\", 2).substring(0, 5) // Format to 4 digits: 00:00\n\n    return output\n}\n\n\nexport let up = (str) => {\n    const capitalStr = str.replace(/\\b\\w/g, c => c.toUpperCase());\n    return capitalStr\n}\n\nexport let upFirstLetterOnly = (s) => {\n    return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n// Helper function used by formatTime\nexport function insert(s, insert, index){\n    const newString = s.slice(0, index) + insert + s.slice(index);\n    return newString;\n}\n\nexport function dayInMilliseconds(){\n    let date = new Date()\n    let day = date.getDate()\n    let month = date.getMonth()\n    let year = date.getFullYear()\n    let simpleDate = new Date(year, month, day);\n    let beginningOfday = simpleDate.getTime()\n    return beginningOfday\n}","import { createContext, useContext, useCallback} from 'react'\n\nimport TimeContext from './TimeContext'\nimport AuthContext from './AuthContext'\n\nimport dd from '../utilities/Debugger'\nimport { dayInMilliseconds } from '../utilities/utilities'\n\nconst RequestContext = createContext()\n\nexport default RequestContext\n\nexport const RequestProvider = ({children}) => {\n\n    let { time } = useContext(TimeContext)\n    let { user, serverURL, authTokens } = useContext(AuthContext)\n    \n    let updateEntry = useCallback(\n        async(someData) => {\n\n            //dd(\"initiate http request to update data\")\n        \n            let response = await fetch(serverURL + 'updateEntry/', {\n                method: 'POST',\n                headers:  {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + String(authTokens.access)\n                },\n                body: JSON.stringify({\n                    ...someData,\n                    'creator': user.id,\n                    'dateString': time.dateString,\n                    'dayInMilliseconds': dayInMilliseconds()\n                })\n            })\n        \n            let data = await response.json()\n            if (response.status === 201){\n                dd(data)\n            } else if (response.status === 401){\n                alert(\"You are not authorized to update this entry\")\n                //setBody(props.data.body)\n            } else if (response.status === 404){\n                alert(\"The entry you are trying to edit could not be found.\")\n                //setBody(props.data.body)\n            }\n        },\n\n        // Dependency array\n        [authTokens?.access, serverURL, time.dateString, user?.id]\n    )\n\n    let updateSettings = useCallback(\n        async(someData) => {\n\n            //dd(\"initiate http request to update data\")\n        \n            let response = await fetch(serverURL + 'updateSettings/', {\n                method: 'POST',\n                headers:  {\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + String(authTokens.access)\n                },\n                body: JSON.stringify(someData)\n            })\n        \n            let data = await response.json()\n            if (response.status === 201){\n                dd(data)\n            } else if (response.status === 401){\n                alert(\"You are not authorized to update this user's settings\")\n                //setBody(props.data.body)\n            } else if (response.status === 404){\n                alert(\"The user you are trying to edit could not be found.\")\n                //setBody(props.data.body)\n            }\n        },\n\n        // Dependency array\n        [authTokens?.access, serverURL, user?.id]\n    )\n    \n\n    let contextData = {\n        updateEntry: updateEntry,\n        updateSettings: updateSettings\n    }\n\n    return (\n        <RequestContext.Provider value = {contextData}>\n            {children}\n        </RequestContext.Provider>\n    )\n\n}","import React, { useContext} from 'react'\nimport TimeContext from '../../context/TimeContext'\nimport AuthContext from '../../context/AuthContext'\n// import { up } from '../../utilities/utilities'\n//import dd from '../../utilities/Debugger'\n\nconst TimeDisplay = () => {\n\n    let { time } = useContext(TimeContext)\n    // let { logoutUser } = useContext(AuthContext)\n    \n    return (\n        <div id = \"date\">\n            <div id = \"day\"> {time.date} </div>\n{/*             <div onClick = {logoutUser} id = \"time\"> Logout </div> */}\n            <div id = \"time\"> {time.time} </div>\n        </div>\n    )\n}\n\nexport default TimeDisplay\n","\nimport React, { useContext, useState, useEffect } from 'react'\nimport RequestContext from '../../context/RequestContext'\nimport { formatTime } from '../../utilities/utilities'\n\nimport dd from '../../utilities/Debugger'\n\nconst SleepInput = (props) => {\n\n    let { updateEntry } = useContext(RequestContext)\n\n    // State\n    let [state, setState] = useState({\n        wake: \"\",\n        sleep: \"\",\n        wakeSaved: \"\",\n        sleepSaved: \"\",\n        sleepDomain: \"pm\",\n        wakeDomain: \"am\"\n    })\n\n    let [time, setTime] = useState({})\n\n    let [userInteraction, setUserInteraction] = useState(false)\n\n    // Props not available on first render -- must be saved to state here in useEffect\n    // props.data needed as dependency\n    useEffect(() => {\n\n        setTime(props.time)\n        \n        setState({\n            ...state,\n            wakeSaved: props.data.wake,\n            sleepSaved: props.data.sleep,\n            wakeDomain: props.data.wakeDomain ? props.data.wakeDomain : state.wakeDomain,\n            sleepDomain: props.data.sleepDomain ? props.data.sleepDomain : state.sleepDomain,\n        })\n\n    }, [props.data.wake, props.data.sleep, props.data.wakeDomain, props.data.sleepDomain, props.time])\n\n    // set wake and sleep times\n    useEffect(() => {\n\n        let wakeIsValid = validateTime(state.wake)\n        let sleepIsValid = validateTime(state.sleep)\n\n        if (wakeIsValid || sleepIsValid){\n\n\n            // current task -- making sure sleep and wake Domain data getting saved to DB along with other stuff\n            let data = {}\n\n            if (wakeIsValid){\n                data.wake = state.wake\n                dd(\"setting wake data\")\n            }\n\n            if (sleepIsValid){\n                data.sleep = state.sleep\n                dd(\"setting sleep data\")\n            }\n\n            if (userInteraction) updateEntry(data)\n        }\n\n    }, [state.wake, state.sleep, updateEntry])\n\n\n    // set new wakeDomain value\n    useEffect(() => {\n        let data = {}\n        data.wakeDomain = state.wakeDomain\n        if (userInteraction) updateEntry(data)\n\n    }, [state.wakeDomain, updateEntry])\n\n    // set new sleepDomain value\n    useEffect(() => {\n        let data = {}\n        data.sleepDomain = state.sleepDomain\n        if (userInteraction) updateEntry(data)\n    }, [state.sleepDomain, updateEntry])\n\n    let handleAMPM = (sleepScenario) => {\n\n        setUserInteraction(true)\n\n        let AMPMproperty = `${sleepScenario}Domain`\n        let newVal;\n        if (state[AMPMproperty] === \"am\"){\n            newVal = \"pm\"\n        } else if (state[AMPMproperty] === \"pm\"){\n            newVal = \"am\"\n        }\n\n        setState({\n            ...state,\n            [AMPMproperty]: newVal\n        })\n    }\n\n    // Fired when time inputs change\n    let handleTimeInput = (e, sleepScenario) => {\n        e.preventDefault()\n        let val = e.target.value\n        let newData = e.nativeEvent.data\n        let valid = /^\\d*:?\\d*$/.test(newData); // returns false if anything other than number or colon\n        let backSpace = e.nativeEvent.inputType === \"deleteContentBackward\"\n        let newValue = state[sleepScenario]\n        \n        if (backSpace){\n            let oneLess = val.substring(0, val.length)\n            newValue = formatTime(oneLess)\n        } else if (valid){\n            newValue = formatTime(val)\n        }\n\n        // set state\n        setUserInteraction(true)\n        setState({\n            ...state,\n            [sleepScenario]: newValue\n        })\n\n    }\n\n    let validateTime = (val) => {\n        let regex = /^(([0-9]{1}|1[0-2]{1}):[0-5]{1}[0-9]{1}){1}$/y\n        let valid = regex.test(val) \n        return valid\n    }\n\n    return (\n\n        <h3 className = \"section section-header\">\n            🛌 Bed\n            <span className = \"timeInputContainer\">\n                <input\n                className = \"timeInput\"\n                maxLength = \"5\"\n                placeholder = { state.sleepSaved }\n                onChange = {(e) => handleTimeInput(e, \"sleep\")}\n                value = {state.sleep} />\n            </span>\n            <span\n            className = \"AMPM\"\n            onClick = {() => handleAMPM(\"sleep\")}>{state.sleepDomain}</span>\n            , woke\n            <span className = \"timeInputContainer\">\n                <input\n                className = \"timeInput\"\n                maxLength = \"5\"\n                placeholder = { state.wakeSaved }\n                onChange = {(e) => handleTimeInput(e, \"wake\")}\n                value = {state.wake} />\n            </span>\n            <span\n            className = \"AMPM\"\n            onClick = {() => handleAMPM(\"wake\")}>{state.wakeDomain}</span>.\n        </h3>\n    )\n}\n\nexport default SleepInput","\nimport React, { useContext, useState, useEffect } from 'react'\nimport TimeContext from '../../context/TimeContext'\nimport RequestContext from '../../context/RequestContext'\n//import dd from '../../utilities/Debugger'\n\nconst CryInput = (props) => {\n\n    //let { time } = useContext(TimeContext)\n    let { updateEntry } = useContext(RequestContext)\n\n    // STATE\n    let [cries, setCries] = useState(0)\n    let [userInteraction, setUserInteraction] = useState(false)\n    let [saved, setSaved] = useState(\"\")\n\n    // Props not available on first render -- must be saved to state here in useEffect\n    // props.data needed as dependency\n    useEffect(() => {\n\n        if (props.data.cries){\n            setCries(props.data.cries)\n        }\n\n    }, [props.data.cries])\n\n    useEffect(() => {\n\n        if (userInteraction){\n            updateEntry({\n                \"cries\": cries\n            })\n        }\n\n        setSaved(\"saved\")\n\n    }, [cries, updateEntry])\n\n\n    let handleClick = (amount) => {\n        if ( cries > -1 ){\n            setUserInteraction(true)\n            setCries(cries + amount)\n        // If amount is -1, we won't allow more substractions but we do need to allow additions\n        } else if (cries === -1 && Math.sign(amount) === 1){\n            setCries(cries + amount)\n            setUserInteraction(true)\n        }\n    }\n\n    return (\n\n            <div className = \"section\">\n                <div className = \"section-header\"> 💧 Cried this many times:</div>\n\n                <button\n                className = \"button\"\n                onClick = {() => handleClick(-1)}> - </button>\n\n                <button id = \"cryNumber\" className = {\"button \" + saved}> {cries} </button>\n\n                <button\n                className = \"button\"\n                onClick = {() => handleClick(+1)}> + </button>\n                \n                {cries > 30 &&\n                <div className = \"special-message\"> Good god that's a lot of crying! Take care to keep hydrating, take a rest, and do something nice for yourself. </div>}\n                \n                {cries > 50 && \n                <div className = \"special-message\"> Jesus. You are really having a crazy day and I feel for you. It's okay to ask for help -- I recommend you call someone, even if it's just to tell them that you cried your eyes out today. </div>}\n\n            </div>\n    )\n}\n\nexport default CryInput","\nimport React, { useContext, useState, useEffect } from 'react'\nimport TimeContext from '../../context/TimeContext'\nimport RequestContext from '../../context/RequestContext'\nimport dd from '../../utilities/Debugger'\n\nconst EnergyInput = (props) => {\n\n    // Options\n        /// Deselection?\n            // false. HTTP function will not send 0. Selection can be changed but not nullified.\n\n    let { time } = useContext(TimeContext)\n    let { updateEntry } = useContext(RequestContext)\n\n    // STATE\n    let [selection, setSelection] = useState(0)\n    let [userInteraction, setUserInteraction] = useState(false)\n\n    // Props not available on first render -- must be saved to state here in useEffect\n    // props.data needed as dependency\n    useEffect(() => {\n\n            setSelection(props.data[`energy_${time.timeOfDay}`])\n\n    }, [props.data[`energy_${time.timeOfDay}`]])\n\n    useEffect(() => {\n\n    // As it is now, energy cannot be deselected, just changed\n    // To allow deselection:\n    // if (selection > -1 && selection < 4){\n        if (selection > 0 &&  selection < 4 && userInteraction){\n            updateEntry({\n                [`energy_${time.timeOfDay}`]: selection\n            })\n        }\n\n    }, [selection, updateEntry, time.timeOfDay])\n\n    let handleSelection = (e, n) => {\n\n        /* This block allows for deselection:\n        if (selection === n)setSelection(0)\n        else setSelection(n) */\n        setUserInteraction(true)\n        setSelection(n)\n        dd(selection)\n    }\n\n\n    return (\n        <div className = \"section\">\n            <div > ⚡️ This <span id = \"dayRegion\">{time.timeOfDay}</span>, I have this much energy: </div>\n            <p id = \"energyNote\"></p>\n            <div id = \"energyOptions\">\n\n                <button\n                onClick = {(e) => handleSelection(e, 1)}\n                className = {\"button button-energy \"\n                + (selection === 1 ? \"selected saved\" : \"\")}\n                >Little</button>\n\n                <button\n                onClick = {(e) => handleSelection(e, 2)}\n                className = {\"button button-energy \"\n                + (selection === 2 ? \"selected saved\" : \"\")}\n                >Some</button>\n\n                <button\n                onClick = {(e) => handleSelection(e, 3)}\n                className = {\"button button-energy \"\n                + (selection === 3 ? \"selected saved\" : \"\")}\n                >Lots</button>\n\n            </div>\n        </div>\n    )\n}\n\nexport default EnergyInput","\nimport React, { useContext, useState, useEffect } from 'react'\nimport TimeContext from '../../context/TimeContext'\nimport RequestContext from '../../context/RequestContext'\nimport dd from '../../utilities/Debugger'\n//import dd from '../../utilities/Debugger'\n\nconst BCInput = (props) => {\n\n    //let { time } = useContext(TimeContext)\n    let { updateEntry } = useContext(RequestContext)\n\n    let [day, setDay] = useState(0)\n    let [userInteraction, setUserInteraction] = useState(false)\n    //let [month, setMonth] = useState\n\n    let numberOfDays = 32;\n\n    // Create dirt simple month array to map through\n    let month = []\n    for (let i = 0; i<numberOfDays; i++){\n        month[i] = i + 1\n    }\n\n        // Props not available on first render -- must be saved to state here in useEffect\n    // props.data needed as dependency\n    useEffect(() => {\n\n        if (props.data.BC_day){\n            setDay(props.data.BC_day)\n        }\n\n    }, [props.data.BC_day])\n\n    useEffect(() => {\n        if (userInteraction){\n            updateEntry({\n                \"BC_day\": day\n            })\n        }\n\n    }, [day, updateEntry])\n\n    let handleClick = (i) => {\n        setUserInteraction(true)\n        setDay(i)\n    }\n\n    return (\n\n        <div className = \"section\">\n            <div className = \"section-header\">🌙 I am at this day in my cycle:</div>\n            <div className = \"grid-container\">\n\n                {month.map((i) =>\n                <div\n                key = {`BC-day-${i}`}\n                className = {(i === day ? \"saved\" : \"\") + \" grid-item\"}\n                onClick = {() => handleClick(i)}> {i} </div>)}\n            </div>\n\n        </div>\n\n    )\n}\n\nexport default BCInput","import React, { useContext, useEffect, useState } from 'react'\n\nimport AuthContext from '../context/AuthContext'\nimport TimeContext from '../context/TimeContext'\n\n//import LogoutFooter from '../components/LogoutFooter'\n\nimport TimeDisplay from './Tracker/TimeDisplay'\nimport SleepInput from './Tracker/SleepInput'\nimport CryInput from './Tracker/CryInput'\nimport EnergyInput from './Tracker/EnergyInput'\nimport BCInput from './Tracker/BCInput'\n\nimport dd from '../utilities/Debugger'\nimport { up } from '../utilities/utilities'\n\nconst Tracker = () => {\n\n    let { time } = useContext(TimeContext)\n    let { user, authTokens, serverURL, settings, getSettings } = useContext(AuthContext)\n    let [entryData, setEntryData] = useState({})\n    let [sleepSet, setSleepSet] = useState(false)\n    let [energySet, setEnergySet] = useState(false)\n    let [BCSet, setBCSet] = useState(false)\n\n    useEffect(() => {\n        getSettings()\n    }, [])\n\n/*     useEffect(() => {\n        dd(settings)\n    }, [settings]) */\n\n    useEffect(() => {\n\n        getEntry({\n            dateString: time.dateString\n        })\n\n    }, [time.dateString])\n\n    let getEntry = async(someData) => {\n        dd(time)\n\n        let response = await fetch(serverURL + 'getEntry/', {\n            method: 'POST',\n            headers:  {\n              'Content-Type': 'application/json',\n              'Authorization': 'Bearer ' + String(authTokens.access)\n            },\n            body: JSON.stringify({\n                'dateString': time.dateString,\n                //'dayInMilliseconds': dayInMilliseconds()\n            })\n        })\n\n        let data = await response.json()\n        dd(data)\n        if (response.status === 200){\n            setEntryData(data)\n\n            // If after morning and sleep has been set, the form isn't displayed\n            if(typeof data.sleep_set == 'number'){\n                if (time.timeOfDay && time.timeOfDay !== 'morning'){\n                    setSleepSet(true)\n                }\n            }\n\n            if(typeof data[`energy_${time.timeOfDay}`] == 'number'){\n                setEnergySet(true)\n            }\n\n            if(typeof data.BC_day === 'number'){\n                setBCSet(true)\n            }\n\n        } else if (response.status === 401){\n            alert(\"You are not authorized to update this entry\")\n            //setBody(props.data.body)\n        } else if (response.status === 404){\n            alert(\"The entry you are trying to edit could not be found.\")\n            //setBody(props.data.body)\n        }\n    }\n\n    let handleBirthControlChange = () => {\n        setBCSet(false)\n    }\n\n    return (\n        <div id = \"tracker-page\">\n            < TimeDisplay />\n            <div className = \"tracker-body\">\n                \n                { settings.display_rest &&\n                    (!sleepSet ?\n                    < SleepInput data= {entryData} user = {user} time = {time} /> :\n                    <h3 className = \"section section-header\"> 🛌 Nice! Sleep data logged. </h3>\n                    )\n                }\n\n                {settings.display_cries &&\n                    < CryInput data = {entryData}/>\n                }\n\n                {settings.display_energy &&\n                    (!energySet ?\n                    < EnergyInput data = {entryData}/> :\n                    <h3 className = \"section section-header\"> {`⚡️ ${up(time.timeOfDay)} energy level set.` }</h3>\n                    )\n                }\n\n                {settings.display_bc &&\n                    (!BCSet ?\n                    < BCInput data = {entryData}/> :\n                    <h3 className = \"section section-header\"> {`🌙 Day in cycle: #${entryData.BC_day}. `}\n                        <div className = \"bc-change\" onClick = {handleBirthControlChange}> Tap here to change it.</div>\n                    </h3>\n                    )\n                }\n                {/* < LogoutFooter /> */}\n            </div>\n        </div>\n    )\n}\n\nexport default Tracker\n","export default __webpack_public_path__ + \"static/media/pink_sky.338a5b4a.jpeg\";","import React, { useContext, useState } from 'react'\nimport AuthContext from '../context/AuthContext'\nimport { Link } from 'react-router-dom'\nimport background from '../images/pink_sky.jpeg';\nimport dd from '../utilities/Debugger';\n//import dd from '../utilities/Debugger'\n\n\nconst LoginPage = () => {\n\n    let { loginUser, loginAttempt } = useContext(AuthContext)\n    //console.log(process.env.NODE_ENV)\n    \n    return (\n        <div>\n\n            <div className = \"bg-color\"></div>\n            <img className = \"bg-image bg-image-1\" src = {background} alt = \"\"/>\n\n            { loginAttempt && \n                <div className = \"login-message\"> Couldn't log you in. You probably supplied the wrong credentials. </div>\n            }\n\n            <div className = \"login-page-greeting\"> ✨ Welcome to Moonbot, your personal mood tracker!</div>\n \n            <div className = \"login\">\n                <div className = \"login-panel\">\n\n                    {/* <h1 className = \"form-header\"> Log In </h1> */}\n                    <form onSubmit = {loginUser} >\n                        <input className = \"form-line\" type = \"text\" name = \"username\" placeholder = \"username\" autoComplete=\"off\"/>\n                        <input className = \"form-line\" type = \"password\" name = \"password\" placeholder = \"password\" autoComplete=\"off\" />\n                        <input className = \"form-line form-submit\" type = \"submit\" value = \"login\" />\n                    </form>\n\n                </div>\n\n                <div className = \"register-message\"> Don't have an account? <br></br> <Link to=\"/register\" className = \"register-link\">Register here</Link>\n                </div>\n                \n            </div>\n\n        </div>\n    )\n}\n\nexport default LoginPage\n","export default __webpack_public_path__ + \"static/media/snowy_moon.250fdd44.jpeg\";","import React, { useContext, useState } from 'react'\nimport AuthContext from '../context/AuthContext'\nimport { Link } from 'react-router-dom'\nimport background from '../images/snowy_moon.jpeg'\n\nconst RegisterPage = () => {\n\n    let { registerUser, loginAttempt } = useContext(AuthContext)\n\n    return (\n        <div>\n\n            <img className = \"bg-image\" src = {background} alt = \"\" />\n            <div className = \"bg-color\"></div>\n\n            { loginAttempt && \n                <div className = \"login-message\"> Couldn't create an account. Check that you entered the same password in confirm password! </div>\n            }\n\n{/*             <div className = \"login-page-greeting\"> ✨ Welcome to Moonbot, your personal mood tracker!</div> */}\n\n\n            <div className = \"login register\">\n                <div className = \"login-panel\">\n                    <form onSubmit = {registerUser} >\n                        <input type = \"text\" name = \"username\" placeholder = \"Username\" className = \"form-line\" autoComplete=\"off\"/>\n                        {/* <input type = \"text\" name = \"email\" placeholder = \"Email\" className = \"form-line\" autoComplete=\"off\"/> */}\n                        <input type = \"password\" name = \"password\" placeholder = \"Password\" className = \"form-line\" autoComplete=\"off\"/>\n                        <input type = \"password\" name = \"confirmation\" placeholder = \"Confirm Password\" className = \"form-line\" autoComplete=\"off\"/>\n                        <input type = \"submit\" value = \"Register\" className = \"form-line form-submit\" />\n                    </form>\n                </div>\n\n                <div className = \"register-message\"> Have an account? <br></br> <Link to=\"/login\" className = \"register-link\">Login here</Link>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\n\nexport default RegisterPage\n","import React, { useEffect, useState } from 'react'\nimport { AreaChart, Area, Legend, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'\nimport dd from '../utilities/Debugger'\n\nconst Rechart_1 = (props) => {\n\n    let [data, setData] = useState({})\n\n    useEffect(() => {\n\n\n        setData(props.data)\n        dd(data)\n\n    }, [props.data])\n\n    let legend = [\n      {\n        name: \"rest\",\n        dataName: \"rest\",\n        stroke: '#544fb3',\n        fill: '#8884d8'\n      },\n      {\n        name: \"energy\",\n        dataName: \"energy_total\",\n        stroke: '#ff8c00',\n        fill: '#ffd24a'\n      },\n      {\n        name: \"cries\",\n        dataName: \"cries\",\n        stroke: '#0f5a94',\n        fill: '#8accff'\n      },\n    ]\n\n    // so I need to restructure my data in order to render it into something\n\n/*     <ResponsiveContainer width={700} height=\"80%\">\n    <AreaChart data={data}\n      margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <Tooltip />\n      <ReferenceLine x=\"Page C\" stroke=\"green\" label=\"Min PAGE\" />\n      <ReferenceLine y={4000} label=\"Max\" stroke=\"red\" strokeDasharray=\"3 3\" />\n      <Area type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n    </AreaChart>\n  </ResponsiveContainer> */\n\n    return (\n      <div className = \"dashBoard\">\n        <div className = \"recharts-container\">\n          <div className = \"chart-overflow\">\n            <ResponsiveContainer width=\"99%\" height={200}>\n              <AreaChart\n                data={data}\n                margin={{ top: 30, right: 14, left: -14, bottom: 0 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey = \"niceDate\"  />\n                <YAxis />\n                <Tooltip />\n                <Area\n                  type='monotone'\n\n                  dataKey='rest'\n                  stroke={legend[0].stroke}\n                  fill={legend[0].fill}\n                />\n\n                <Area\n                  type='monotone'\n\n                  dataKey='energy_total'\n                  stroke={legend[1].stroke}\n                  fill={legend[1].fill}\n                />\n\n                <Area\n                  type='monotone'\n\n                  dataKey='cries'\n                  stroke={legend[2].stroke}\n                  fill={legend[2].fill}\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n            </div>\n        </div>\n        <div className = \"my-legend\">\n        {legend.map((i) =>\n                <div\n                key = {`legend-${i.name}`}\n                style = {{color: i.stroke, background: i.fill}}\n                className = \"legend-item\">\n                  {i.name}\n                </div>)\n        }\n        </div>\n      </div>\n     );\n}\n\nexport default Rechart_1\n","import React, { useContext, useEffect, useState } from 'react'\nimport AuthContext from '../context/AuthContext'\nimport Rechart_1 from '../charts/Rechart_1'\nimport moment from 'moment';\nimport Rechart_Linechart_1 from '../charts/Rechart_Linechart_1'\nimport dd from '../utilities/Debugger'\n\nconst Log = () => {\n\n    let { user, authTokens, serverURL } = useContext(AuthContext)\n    let [data, setData] = useState({})\n    let [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        if (loading = true){\n            setLoading(false)\n            getData()\n        }\n\n    }, [loading])\n\n    let getData = async() => {\n\n        let response = await fetch(serverURL + 'graphAllEntries/', {\n            method: 'POST',\n            headers:  {\n              'Content-Type': 'application/json',\n              'Authorization': 'Bearer ' + String(authTokens.access)\n            }\n        })\n\n        let someData = await response.json()\n        if (response.status === 200){\n            let reformatted = []\n            let count = 0\n            someData.entries.forEach(element => {\n                element.energy = element.energy * 5\n                let m = moment(element.dim)\n                let niceDate = m.format(\"MMM D\");\n                element.niceDate = niceDate\n            });\n            setData(someData.entries)\n        } else if (response.status === 401){\n            setLoading(false)\n            alert(\"You are not authorized to update this entry\")\n            //setBody(props.data.body)\n        } else if (response.status === 404){\n            setLoading(false)\n            alert(\"The entry you are trying to edit could not be found.\")\n            //setBody(props.data.body)\n        }\n    }\n\n    return (\n        <div>\n\n            < Rechart_1 data = {data}> </ Rechart_1 >\n            < div> </div>\n            \n        </div>\n    )\n}\n\nexport default Log\n","import React, { useContext, useEffect, useState } from 'react'\nimport AuthContext from '../context/AuthContext'\nimport TimeContext from '../context/TimeContext'\nimport RequestContext from '../context/RequestContext'\nimport dd from '../utilities/Debugger'\n\nconst SettingsPage = () => {\n\n    //let { time } = useContext(TimeContext)\n    let { getSettings, setSettings, settings } = useContext(AuthContext)\n    let { updateSettings } = useContext(RequestContext)\n    //let [settings, setSettings] = useState({})\n\n    let displayKey = {\n        display_cries: \"💧 Cry Tracker\",\n        display_energy: \"⚡️ Energy Tracker\",\n        display_rest: \"🛌 Rest Tracker\",\n        display_bc: \"🌙 Birth Control\",\n        display_outside: \"🦉 Outside Log\"\n    }\n\n    // Log changes in settings to database\n    useEffect(() => {\n\n        dd(settings)\n\n        updateSettings(settings)\n\n    }, [settings])\n\n    // Load initial settings\n    useEffect(() => {\n\n        getSettings()\n\n    }, [])\n\n    let handleSettingsChange = (key) => {\n        setSettings({\n            ...settings,\n            [key]: !settings[key]\n        })\n\n/*         updateSettings({\n            [updatedSettings[key][0]]: updatedSettings[key][1]\n        }) */\n        // settings is an array or arrays\n        // key is just one item, an array of two values, the property, like 'display_bc', and the value,\n        // either true or false\n        // settings[settingsKey] will return me the correct object in settings\n\n\n        // create a clone of the settings array\n        //let updatedSettings = settings\n        // find THIS item, the one that's been clicked, and change it's second value to the opposite of what it was\n        //updatedSettings[key][1] = !settings[key][1]\n        //dd(updatedSettings[key])\n\n/*         setSettings(updateSettings)\n        updateSettings({\n            [updatedSettings[key][0]]: updatedSettings[key][1]\n        }) */\n    }\n\n    return (\n        <div className = \"settings-container\">\n            <div className = \"settings-header\"> Select which data to track. </div>\n            <div className = \"settings-control-panel\">\n                {Object.keys(settings).map((key, index) =>\n                    <div\n                    key = {`settings-item-${key}`}\n                    className = \"settings-item\">\n\n                        <span className = \"settings-label\" > {displayKey[key]}: </span>\n                        <span className = \"settings-value\" >\n                            <span\n                            onClick = {() => handleSettingsChange(key)}\n                            className = {\"settings-value-inner \"\n                            + `settings-${settings[key] === true ? \"on\" : \"off\"}`}>\n\n                                {settings[key] == true ? \"On\" : \"Off\"}\n\n                            </span>\n                        </span>\n\n                    </div>)}\n            </div>\n        </div>\n    )\n}\n\nexport default SettingsPage\n","import React from 'react'\n//import AuthContext from '../context/AuthContext'\n//import dd from '../utilities/Debugger'\n\n\nconst NotFound = () => {\n\n    //let { loginUser, loginAttempt } = useContext(AuthContext)\n\n    return (\n        <div className = \"push\">\n            <h1> 404 </h1>\n            <div> Page not found</div>\n        </div>\n    )\n}\n\nexport default NotFound\n","import React, { useContext } from 'react'\nimport { Link } from 'react-router-dom'\nimport AuthContext from '../context/AuthContext'\nimport { up } from '../utilities/utilities'\n\n\nconst Header = () => {\n    let { user, logoutUser, loginAttempt, clearLoginAttempt} = useContext(AuthContext)\n\n    return (\n            <div className = {\"nav-bar \" + (user ? \"in\" : \"out\")}>\n                {/* <Link to=\"/\" className = \"nav-option\">Home</Link> */}\n\n                {user ? (\n                    \n                    <React.Fragment>\n\n                            {/* <Link to={`/profile/${user.id}`} className = \"nav-option\" >{user.uppercaseUsername}</Link> */}\n                            {/* <Link to=\"/following\" className = \"nav-option\" >Following</Link> */}\n                            <div className = \"tracker-title-display\"> ✨&nbsp;{up(user.username)}'s Mood Tracker </div>\n                            <Link to=\"/\" className = \"nav-option\">🌙&nbsp;Moonbot </Link>\n                            <Link to=\"/_log\" className = \"nav-option\">🔭&nbsp;Log </Link> \n                            <Link to=\"/settings\" className = \"nav-option\">🪐&nbsp;Settings </Link> \n                            <Link to=\"/\" onClick = {logoutUser } className = \"nav-option\" >🌑&nbsp;Logout</Link>\n\n                    </React.Fragment>\n\n                ): \n\n                    <React.Fragment>\n\n                            <Link to=\"/login\" className = \"nav-option\"\n                            onClick = {clearLoginAttempt}> 🌙 Login</Link>\n\n                            <Link to=\"/register\" className = \"nav-option\"\n                            onClick = {clearLoginAttempt}> ✨ Register</Link>\n\n                    </React.Fragment>\n                    \n                }\n\n                    {/* <Link to=\"/\" className = \"header-title nav-option\"> 🌙 MoonBot ✨ </Link> */}\n                \n{/*                 {loginAttempt &&\n                    <div id = \"msg-danger\" className=\"alert alert-danger\" role=\"alert\">\n                        Login Failed\n                    </div>\n                } */}\n            </div>\n    )\n}\n\nexport default Header\n","import './App.scss';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport PrivateRoute from './utilities/PrivateRoute'\nimport { AuthProvider } from './context/AuthContext'\nimport { TimeProvider } from './context/TimeContext'\nimport { RequestProvider } from './context/RequestContext'\n\nimport Tracker from './pages/Tracker'\nimport LoginPage from './pages/LoginPage'\nimport RegisterPage from './pages/RegisterPage'\nimport Log from './pages/Log'\nimport SettingsPage from './pages/SettingsPage'\nimport NotFound from './pages/NotFound'\nimport Header from './components/Header'\n//import dd from './utilities/Debugger'\n\nfunction App() {\n\n  return (\n    <div id = \"app-all\">\n\n        <Router>\n          <AuthProvider>\n                <TimeProvider>\n                  <RequestProvider>\n\n                    <Header />\n\n                      <Switch>\n                        \n                        <PrivateRoute component = {Tracker} path = \"/\" exact />\n                        <PrivateRoute component = {Log} path = \"/_log\" exact/>\n                        <PrivateRoute component = {SettingsPage} path = \"/settings\" exact/>\n\n                        <Route component = {LoginPage} path = \"/login\" exact/>\n                        <Route component = {RegisterPage} path = \"/register\" />\n\n                        <Route component={NotFound} />\n                        \n                      </Switch>\n                  </RequestProvider>\n                </TimeProvider>\n            </AuthProvider>\n        </Router>    \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}